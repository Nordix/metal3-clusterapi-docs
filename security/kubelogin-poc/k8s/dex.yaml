apiVersion: v1
kind: Namespace
metadata:
  name: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  replicas: 1 # 3 normally, 1 for testing
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex
      containers:
      - image: ghcr.io/dexidp/dex:v2.32.0
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

        ports:
        - name: https
          containerPort: 5556

        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
        - name: tls
          mountPath: /etc/dex/tls

        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS
      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: dex.example.com.tls
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://dex.example.com:32000
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
    connectors:
    - type: ldap
      # Required field for connector id.
      id: ldap
      # Required field for connector name.
      name: LDAP
      config:
        # Host and optional port of the LDAP server in the form "host:port".
        # If the port is not supplied, it will be guessed based on "insecureNoSSL",
        # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
        # otherwise.

        # openLDAP is running in svc network on port 1389 in this testing setup
        host: openldap.openldap:1389

        # Following field is required if the LDAP host is not using TLS (port 389).
        # Because this option inherently leaks passwords to anyone on the same network
        # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
        #
        # openLDAP is running without TLS in this testing setup
        insecureNoSSL: true

        # If a custom certificate isn't provide, this option can be used to turn on
        # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
        # of explorative phases.
        #
        # insecureSkipVerify: true

        # When connecting to the server, connect using the ldap:// protocol then issue
        # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
        #
        # startTLS: true

        # Path to a trusted root certificate file. Default: use the host's root CA.
        # we don't use custom CA for this
        # rootCA: /etc/dex/ldap.ca

        # A raw certificate file can also be provided inline.
        # rootCAData: ( base64 encoded PEM file )

        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        #
        # openLDAP testing admin creds, although read-only creds recommended
        bindDN: cn=admin,dc=example,dc=org
        bindPW: adminpassword

        # The attribute to display in the provided password prompt. If unset, will
        # display "Username"
        # usernamePrompt: SSO Username

        # User search maps a username and password entered by a user to a LDAP entry.
        #
        # This LDAP configuration needs to match the LDAP/AD config used in production
        # It should be noted that if the groupSearch config is invalid, the user is
        # not able to login, even if username/password would be correct as the token
        # generation will fail!
        userSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=person)(uid=<username>))".
          baseDN: dc=example,dc=org
          # Optional filter to apply when searching the directory.
          # filter: "(objectClass=person)"

          # username attribute used for comparing user entries. This will be translated
          # and combined with the other filter as "(<attr>=<username>)".
          username: uid
          # The following three fields are direct mappings of attributes on the user entry.
          # String representation of the user.
          idAttr: uidNumber
          # Required. Attribute to map to Email.
          emailAttr: sn  # email is not available in openLDAP test server
          # Maps to display name of users. No default value.
          nameAttr: cn
          # Maps to preferred username of users. No default value.
          preferredUsernameAttr: uid

        # Group search queries for groups given a user entry.
        groupSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=group)(member=<user uid>))".
          baseDN: ou=users,dc=example,dc=org
          # Optional filter to apply when searching the directory.
          filter: "(objectClass=groupOfNames)"

          # Following list contains field pairs that are used to match a user to a group. It adds an additional
          # requirement to the filter that an attribute in the group must match the user's
          # attribute value.
          userMatchers:
          - userAttr: dn
            groupAttr: member

          # Represents group name.
          nameAttr: cn

    oauth2:
      passwordConnector: ldap
      # Password grant type does not have approval screen, but could be useful
      # for other grant types to avoid an extra click in the browser
      # skipApprovalScreen: true

    staticClients:
    - id: kubelogin-test
      name: Kubernetes
      # none of the redirect uris are needed for password grant type
      # they're listed here as needed for testing other grant types
      redirectURIs:
      - urn:ietf:wg:oauth:2.0:oob
      - http://localhost:8000
      - http://localhost:18000
      - /device/callback
      secret: kubelogin-test-secret

    enablePasswordDB: true
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  type: NodePort
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32000
  selector:
    app: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex # Service account assigned to the dex pod, created above
  namespace: dex # The namespace dex is running in
---
apiVersion: v1
kind: Secret
metadata:
  name: dex.example.com.tls
  namespace: dex
type: kubernetes.io/tls
stringData:
  # these certificates can be generated by using the Dex's gencert.sh
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDKDCCAhCgAwIBAgIUZuNp2ziatARk1NlOhJXitIuFiAIwDQYJKoZIhvcNAQEL
    BQAwEjEQMA4GA1UEAwwHa3ViZS1jYTAeFw0yMzEwMTIwODUxNTFaFw0yMzEwMjIw
    ODUxNTFaMBIxEDAOBgNVBAMMB2t1YmUtY2EwggEiMA0GCSqGSIb3DQEBAQUAA4IB
    DwAwggEKAoIBAQC2RlTidTfEjtEsqrIPtunNA/iYnzZ7aZDNVmWB5hkRhE0J/gyl
    58PoPuSwT3nn11QLvQn9wE0EuLGQOu1n5YuJ1VlxNAjcz9WQHpMhIk6bwbHsMuv/
    6uOs8qPyrhWk5wS3oRNY3bJdyRkwdGv5txgTIjsNBGv7N7UYtxoC5KnTDssJV7jM
    7jK9VGS2uqp4dDUlPpGoMGJzxD33Kjc9hGVdmr2vjYVDp5sE++xeMTCRE1cnZXRQ
    hE5E15vEVkuSmOUaZcDLNmqKTg1v3pVARLNKRZbtHeYbaDIYwE96fh1v6gS1f8xN
    ouCYGlVUsfo05/NMUEARA3LDnHqIQzHjrwFLAgMBAAGjdjB0MAkGA1UdEwQCMAAw
    CwYDVR0PBAQDAgXgMBoGA1UdEQQTMBGCD2RleC5leGFtcGxlLmNvbTAdBgNVHQ4E
    FgQU/Y+ymdtnSTUDJ76N6fw6VJHft/QwHwYDVR0jBBgwFoAU4JGqsUcWuSojjCpZ
    HJUzyM4tY3QwDQYJKoZIhvcNAQELBQADggEBAC6zGncezPoIv9V3edj4PaVWGiP7
    pZocf5RSdLgotDu18DAaMTxeSQ8pTEE4DtLIJqzz8PXRjmwqF0sz+y40eqnL6EXV
    6LiJDPqDdiB/SqjD1dHeJ4IROWDAuB28bxFRT70yE3iBoHHg1f+dsCkfm8VvlAyR
    eS3E9mtsAHsrlh/iyhceaM1JgcIc8skKn6GUZJEWRAvOBX5NnAMTrHNyHGop8k9+
    vqJmhbGUnCFg2KuMwmJXZ4FXpU60UaU1l3daaAuZ94tfaY1KovmaeopNNvoUNglY
    5nHWvfcx5m/H1L58Zz0PmksmOBK+yEr6qb6Ohd6AbstNjuRyYvAKNXARv5w=
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC2RlTidTfEjtEs
    qrIPtunNA/iYnzZ7aZDNVmWB5hkRhE0J/gyl58PoPuSwT3nn11QLvQn9wE0EuLGQ
    Ou1n5YuJ1VlxNAjcz9WQHpMhIk6bwbHsMuv/6uOs8qPyrhWk5wS3oRNY3bJdyRkw
    dGv5txgTIjsNBGv7N7UYtxoC5KnTDssJV7jM7jK9VGS2uqp4dDUlPpGoMGJzxD33
    Kjc9hGVdmr2vjYVDp5sE++xeMTCRE1cnZXRQhE5E15vEVkuSmOUaZcDLNmqKTg1v
    3pVARLNKRZbtHeYbaDIYwE96fh1v6gS1f8xNouCYGlVUsfo05/NMUEARA3LDnHqI
    QzHjrwFLAgMBAAECggEAETRP6coU7Uq/p/QlTMIVN60oHJvBLuKMG4g2mjgHkLWI
    of373/hMGlKUD6eIwvR6RzCyIznbQIFVp96aru5QfpOH1t1e+ByZNKULem/8XyDo
    CXqATQ5fgWEA+YnV8CkqsvxopkAoCEh6xgM5zSmrg47SZ7b4TDokr+8EbQEmnbhE
    VIkqhTJDs1Es+y+hOIut3rbrkwsnJqg98FWpAmavgen6P/m5I2vN2Cc2gb+ht3UT
    5akCTyTEUYNy8+EOZ8fpdAW6Z+6Uo/0W+S1N1RkLwDO/IAgzsLcaQNxSMSNQG08/
    x40Z7HKLCTM0jWvvyTbCq4mZkfiwGpCHT2w74vdSrQKBgQDpfli76xUXie6Q3Dqk
    eT0FvcE2Xtc95hcwT1DKjS9zIGf96iIGdbQNMkVRu7Ovu0rrIYSdfQy1xbuYcBa8
    qEALKldkO5jFj/5z/puEorOUnO7w2N/0TEzk0zJ/hGgQKF5LdJ3wvDkUhEt41LDF
    iwvIflmJzFq5hyE0IW67qmjGNQKBgQDH2B3vOxxB63ucereSm85qeorURteH9Dfn
    Dd9syGchvOYY9uWKonVP7UevmQcvcO32zeGrCpo8hVOoCMTOShBnf1gAhXMQNAF3
    XyNA2ognCJJRsM7iy+97wyIgb5XGtM7Pz0BOUcPC/0OnHz9PFqNmGokH2wU3NxbR
    gVQGWiOZfwKBgQCyOWaxybbHyNj4aaG5eXFCuJyKS8ovzTlV/rTEZxAY6Ft4TQa7
    t4w/pmeTA5scP/HnmCYJsDHLbarLqIMybZq06xTZxUPPSSIImAdNLoO0pDUeUexg
    JP1sjGi3PPHRo36WSeVko8dOCc0x5ecoYgIUf50IuZtmkeaeTAah6GkhIQKBgQCG
    QlZSC5c/XjHsfbFoqI4zkOJGHNXd+5+29eX9kmFfFCZN7UlnKx+/M70uZpOiNq9Y
    WRbcL0JRmI0MXd/Ca5W7wpzftMgJwbaeeOcZQfeoqaSLh0pmqfXZYs5BllW8ampq
    yGT+eQYYsh/EXkTNIHtkND2NboKBhtwookdOAS7bhwKBgCQJko7tB/g4GQAMyVoP
    WuSowvJJipaVv0VWUoD/ExNOsCOkJm9wqJxQAjA5ClZR9y+pxsbTlQHIuraKzvMn
    Azu2odRFQzbeZr773TRfe/rIEQt/Co8NJH8ilolIOfFidMUkZKZKYCb93MFNpye+
    wH9SvJ4kz/jzHkw+z87xnkFz
    -----END PRIVATE KEY-----
